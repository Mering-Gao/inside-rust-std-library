#+title: inside-rust-std-library

* 引言

RUST 无疑是编程语言史对资深程序员最不友好的高级语言(对初学者是友好的), 在仅依靠静态编译的前提下实现一门安全的编程语言,
这是必须付出的代价. 无论如何, 成为一门编程语言的老手的最佳办法就是深入分析, 学习, 理解优秀的代码, 那 RUST 标准库的代码
必然是不可绕过的最佳教材. 另外, 掌握 RUST 也必然意味对标准库的熟练掌握, 深入了解标准库接口后面的秘密无疑能帮助我们更好
的掌握如何使用标准库.

** 本书目的

本书主要是对 RUST 标准库代码进行分析, 希望通过对标准库的学习, 分析, 能让读者对 RUST 代码的编写技巧, 规则有更好的理解,
为读者成为 RUST 老手奠定基础.

** 目标读者

本书不适合初级程序员, 本书针对的最佳对象是资深的 C/C++ 程序员, 转学 RUST. 本书也适合已经采用 RUST 编写了一段时间程序,
但希望对 RUST 有更深的了解, 尤其是希望进行操作系统内核编程或通用编程框架编程的程序员. 对于 Java/python/go 等语言的资深
程序员, 本书可以作为 RUST 与其他语言相比较的一个参考. 阅读本书之前, 读者最好已经学习过官方教程, 中文翻译版链接如下 [[https://rustwiki.org/zh-CN/book/][RUST
程序设计语言]].

本书不是标准库参考手册, 如需要参考手册, 中文翻译版链接如下 [[ https://rustwiki.org/zh-CN/std/][RUST标准库参考手册]]. 本书难度应该属于死灵书级别, 中文翻译版死
灵书链接如下 [[https://nomicon.purewhite.io/][RUST秘典]]

** 本书约定

对于代码的解析, 以代码中文注释的方式放在本书的代码中.

* 说明

- 本书主要对 RUST 的标准库代码进行分析.
- 本书尽可能给读者找出一条标准库代码的阅读脉络. 同时, 分析不仅仅针对代码的功能, 也针对代码背后的需求及若干代码设计的思
  路.
- C 语言精通的标志是对指针的精通. RUST 的裸指针也是 RUST 的最基础及最核心的难点之一.
- 所以, 将裸指针及相关的内存模块作为代码分析的起始点, 熟悉了裸指针及内存, 自然也就对所有权, 借用, 生命周期的本质有了深
  刻的理解, RUST 语言的最难关便过了.
- 泛型是 RUST 不可分割的语法之一, 而对于其他语言, 没有泛型不影响语言的使用. 泛型及基于 trait 的泛型约束是 RUST 的另一个
  代码基础.
- 针对基本类型的分析, 可以看到 RUST 利用 trait 语法使之具备了无限的扩展性, 这是 RUST 更有表现力的语法能力的展现.
- ~Option<T>/Result<T,E>~ 等类型实际完全是由标准库定义的, 并不是 RUST 语言最底层的基本内容, 可以从代码分析中发现这一点.
- 所有的运算符都可以重载, 且可以跨越类型重载, RUST 的运算符重载揭示了 RUST 很多的编码奥秘及技巧.
- Iterator 加闭包是函数式编程的基础构架, Iterator 的适配器构成了函数式编程的基础设施, RUST 完整的实现了这些内容, 并且几
  乎为每个类型都实现了迭代器, 并尽可能的为函数式编程做好了准备.
- ~Cell<T>/RefCell<T>/Pin<T>/Lazy<T>~ 代码证明了在 RUST 的基础语法下, 如何创造性的解决问题.
- ~Box<T>/RawVec<T>~ 是两个堆内存申请的基本结构, 善用这两个结构, 除非写内存管理, 基本上就不必再接触底层的堆内存申请及释放.
- 每一个智能指针实际上也是 RUST 对经典的数据结构实现的精妙例程.
- RUST 对不同操作系统的适配让程序员不必象 C 那样再重复的耗费精力并且还沾沾自喜于此份工作.
- 仅支持异步编程的 ~async/await~, Future 也体现了 RUST 的作最基础的工作的态度.


* 后记

终于写完了这本书, 可以长舒一口气了. 研究 RUST 标准库的代码是一件有趣而辛苦的工作, 为什么会有这个类型结构？在一个大系统
中这个类型结构应该怎样使用是最造成困扰, 甚至要花上几天的时间才能够彻底搞清楚. 这是系统性的给出一个类型分析所必须付出的
代价.

标准库中的代码, 很多都展现了 RUST 的独特美感, 让人有幸运的感觉, 如果没有动念写这本书, 这些代码估计就错过了.

在分析代码的过程中, 也发现了两个标准库代码的 bug, 向 rust-lang 项目提交了一个 issue, 一个 PR, 都被承认并进行了相关修改,
更加觉得不枉辛苦.

希望这本书能对读者学习 RUST 起到较大的帮助, RUST 是一门可以减少程序员浪费青春的语言, 想起那些因为 C 语言的灵活及垃圾的
安全性而消耗的自己的青春, 就对 RUST 出现的过晚而遗憾不已.

但好菜不怕晚, 强烈建议每个程序员都对 RUST 做深入学习及应用, 一定会给自己的职业生涯带来巨大的利益.
